var searchIndex = {};
searchIndex['crust'] = {"items":[[0,"","crust","#crust\nReliable p2p network connections in Rust with NAT traversal.\nOne of the most needed libraries for any server-less / decentralised projects",null,null],[4,"Endpoint","","Enum representing endpoint of supported protocols",null,null],[13,"Tcp","","",0,null],[4,"Port","","",null,null],[13,"Tcp","","",1,null],[11,"clone","","",0,{"inputs":[{"name":"endpoint"}],"output":{"name":"endpoint"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"endpoint"},{"name":"endpoint"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"endpoint"},{"name":"endpoint"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"endpoint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"port"}],"output":{"name":"port"}}],[11,"fmt","","",1,{"inputs":[{"name":"port"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"endpoint"},{"name":"endpoint"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"endpoint"},{"name":"endpoint"}],"output":{"name":"ordering"}}],[0,"connection_manager","","",null,null],[3,"ConnectionManager","crust::connection_manager","A structure representing a connection manager",null,null],[4,"Event","","Enum representing different events that will be sent over the asynchronous channel to the user\nof this module.",null,null],[13,"NewMessage","","",2,null],[13,"NewConnection","","",2,null],[13,"LostConnection","","",2,null],[13,"FailedToConnect","","",2,null],[6,"Bytes","","",null,null],[6,"IoResult","","",null,null],[6,"IoReceiver","","",null,null],[6,"IoSender","","",null,null],[11,"eq","","",2,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"event"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a connection manager.\nUser needs to create an asynchronous channel, and provide the sender half to this method.\nReceiver half will recieve all the events `Event` from this library.",3,{"inputs":[{"name":"connectionmanager"},{"name":"iosender"}],"output":{"name":"connectionmanager"}}],[11,"start_listening","","Starts listening on all supported protocols. Specified hint will be tried first,\nif it fails to start on these, it defaults to random / OS provided endpoints for each\nsupported protocol. The actual endpoints used will be returned on which it started listening\nfor each protocol.",3,{"inputs":[{"name":"connectionmanager"},{"name":"vec"}],"output":{"name":"ioresult"}}],[11,"bootstrap","","This method tries to connect (bootstrap to exisiting network) to the default or provided\nlist of bootstrap nodes. If the bootstrap list is `Some`, the method will try to connect to\nall of the endpoints specified in `bootstrap_list`. It will return once connection with any of the\nendpoint is established with Ok(Endpoint) and it will drop all other ongoing attempts.\nReturns Err if if fails to connect to any of the\nendpoints specified.\nIf `bootstrap_list` is `None`, it will use default methods to bootstrap to the existing network.\nDefault methods includes beacon system for finding nodes on a local network\nand bootstrap handler which will attempt to reconnect to any previous \"direct connected\" nodes.\nIn both cases, this method blocks until it gets one successful connection or all the endpoints\nare tried and failed.",3,{"inputs":[{"name":"connectionmanager"},{"name":"option"}],"output":{"name":"ioresult"}}],[11,"connect","","Opens a connection to a remote peer. `endpoints` is a vector of addresses of the remote peer.\nAll the endpoints will be tried. As soon as one of the connection is established,\nit will drop all other ongoing attempt. On success `Event::NewConnection` with connected `Endpoint`\nwill be sent to the event channel. On failure to connect to any of the provided endpoints,\n`Event::FailedToConnect` will be sent to the event channel.\nFailed attempts are not notified back up to the caller. If the caller wants to know of a\nfailed attempt, it must maintain a record of the attempt itself which times out if a\ncorresponding Event::NewConnection isn't received\nFor details on handling of connect in different protocol refer\nhttps://github.com/dirvine/crust/blob/master/docs/connect.md",3,{"inputs":[{"name":"connectionmanager"},{"name":"vec"}],"output":null}],[11,"send","","Sends a message to specified address (endpoint). Returns Ok(()) if the sending might succeed, and returns an\nErr if the address is not connected. Return value of Ok does not mean that the data will be\nreceived. It is possible for the corresponding connection to hang up immediately after this\nfunction returns Ok.",3,{"inputs":[{"name":"connectionmanager"},{"name":"endpoint"},{"name":"bytes"}],"output":{"name":"ioresult"}}],[11,"drop_node","","Closes connection with the specified endpoint",3,{"inputs":[{"name":"connectionmanager"},{"name":"endpoint"}],"output":null}],[11,"get_stored_bootstrap_endpoints","","",3,{"inputs":[{"name":"connectionmanager"}],"output":{"name":"vec"}}]],"paths":[[4,"Endpoint"],[4,"Port"],[4,"Event"],[3,"ConnectionManager"]]};
searchIndex['cbor'] = {"items":[[0,"","cbor","This crate provides an implementation of [RFC\n7049](https://tools.ietf.org/html/rfc7049), which specifies Concise Binary\nObject Representation (CBOR). CBOR adopts and modestly builds on the *data\nmodel* used by JSON, except the encoding is in binary form. Its primary goals\ninclude a balance of implementation size, message size and extensibility.",null,null],[3,"Decoder","","Read CBOR data items into Rust values from the underlying reader `R`.",null,null],[3,"Encoder","","Encodes Rust values to CBOR bytes in the underlying writer `W`.",null,null],[3,"DirectDecoder","","Experimental and incomplete direct decoder.",null,null],[3,"CborBytes","","A byte string (major type 2).",null,null],[3,"CborTag","","A tag (major type 6).",null,null],[12,"tag","","The tag number.",0,null],[12,"data","","The data item, represented in terms of CBOR abstract syntax.",0,null],[3,"CborTagEncode","","A special type that can be used to encode CBOR tags.",null,null],[4,"Type","","All core types defined in the CBOR specification.",null,null],[13,"UInt","","",1,null],[13,"UInt8","","",1,null],[13,"UInt16","","",1,null],[13,"UInt32","","",1,null],[13,"UInt64","","",1,null],[13,"Int","","",1,null],[13,"Int8","","",1,null],[13,"Int16","","",1,null],[13,"Int32","","",1,null],[13,"Int64","","",1,null],[13,"Float","","",1,null],[13,"Float16","","",1,null],[13,"Float32","","",1,null],[13,"Float64","","",1,null],[13,"Bytes","","",1,null],[13,"Unicode","","",1,null],[13,"Array","","",1,null],[13,"Map","","",1,null],[13,"Tag","","",1,null],[13,"Any","","",1,null],[13,"Null","","",1,null],[13,"Undefined","","",1,null],[13,"Bool","","",1,null],[13,"Break","","",1,null],[4,"Cbor","","CBOR abstract syntax.",null,null],[13,"Break","","A code used to signify the end of an indefinite length data item.",2,null],[13,"Undefined","","An undefined data item (major type 7, value 23).",2,null],[13,"Null","","A null data item (major type 7, value 22).",2,null],[13,"Bool","","A boolean data item (major type 7, values 20 or 21).",2,null],[13,"Unsigned","","An unsigned integer (major type 0).",2,null],[13,"Signed","","A negative integer (major type 1).",2,null],[13,"Float","","An IEEE 754 floating point number (major type 7).",2,null],[13,"Bytes","","A byte string (major type 2).",2,null],[13,"Unicode","","A Unicode string (major type 3).",2,null],[13,"Array","","An array (major type 4).",2,null],[13,"Map","","A map (major type 5).",2,null],[13,"Tag","","A tag (major type 6).",2,null],[4,"CborUnsigned","","An unsigned integer (major type 0).",null,null],[13,"UInt8","","Unsigned 8 bit integer.",3,null],[13,"UInt16","","Unsigned 16 bit integer.",3,null],[13,"UInt32","","Unsigned 32 bit integer.",3,null],[13,"UInt64","","Unsigned 64 bit integer.",3,null],[4,"CborSigned","","A negative integer (major type 1).",null,null],[13,"Int8","","Negative 8 bit integer.",4,null],[13,"Int16","","Negative 16 bit integer.",4,null],[13,"Int32","","Negative 32 bit integer.",4,null],[13,"Int64","","Negative 64 bit integer.",4,null],[4,"CborFloat","","An IEEE 754 floating point number (major type 7).",null,null],[13,"Float16","","IEEE 754 half-precision float.",5,null],[13,"Float32","","IEEE 754 single-precision float.",5,null],[13,"Float64","","IEEE 754 double-precision float.",5,null],[4,"CborError","","Errors that can be produced by a CBOR operation.",null,null],[13,"Io","","An error as a result of an  underlying IO operation.",6,null],[13,"Decode","","An error from the type based decoder.",6,null],[13,"Encode","","An error from the type based encoder.",6,null],[13,"AtOffset","","An error reading CBOR at a particular offset.",6,null],[12,"kind","cbor::CborError","The exact read error.",6,null],[12,"offset","","The byte offset at which the error occurred.",6,null],[13,"UnexpectedEOF","cbor","EOF is found but more bytes were expected to decode the next data item.",6,null],[4,"ReadError","","An error produced by reading CBOR data.",null,null],[13,"TypeMismatch","","An error for when the expected type does not match the received type.",7,null],[12,"expected","cbor::ReadError","Expected CBOR type.",7,null],[12,"got","","Received CBOR type.",7,null],[13,"InvalidAddValue","cbor","When the additional information is inconsistent with the major type.",7,null],[12,"ty","cbor::ReadError","CBOR type.",7,null],[12,"val","","Additional information value.",7,null],[13,"Unassigned","cbor","The value found is unassigned.",7,null],[12,"major","cbor::ReadError","CBOR major type value.",7,null],[12,"add","","Additional information value.",7,null],[13,"Reserved","cbor","The value found is reserved.",7,null],[12,"major","cbor::ReadError","CBOR major type value.",7,null],[12,"add","","Additional information value.",7,null],[13,"Other","cbor","Some other error occurred.",7,null],[4,"WriteError","","An error produced by writing CBOR data.",null,null],[13,"InvalidMapKey","","Occurs when writing a map key that isn't a Unicode string.",8,null],[12,"got","cbor::WriteError","The received type (if that information is available).",8,null],[11,"from_reader","cbor","Create a new CBOR decoder from the underlying reader.",9,{"inputs":[{"name":"decoder"},{"name":"r"}],"output":{"name":"decoder"}}],[11,"decode","","Decode a sequence of top-level CBOR data items into Rust values.",9,{"inputs":[{"name":"decoder"}],"output":{"name":"decodeditems"}}],[11,"items","","Read a sequence of top-level CBOR data items.",9,{"inputs":[{"name":"decoder"}],"output":{"name":"items"}}],[11,"from_bytes","","Create a new CBOR decoder that reads from the buffer given.",9,{"inputs":[{"name":"decoder"},{"name":"t"}],"output":{"name":"decoder"}}],[11,"from_writer","","Encode CBOR to an arbitrary writer.",10,{"inputs":[{"name":"encoder"},{"name":"w"}],"output":{"name":"encoder"}}],[11,"encode","","Encode an iterator of Rust values to CBOR in the underlying writer.",10,{"inputs":[{"name":"encoder"},{"name":"i"}],"output":{"name":"cborresult"}}],[11,"flush","","Flush the underlying writer.",10,{"inputs":[{"name":"encoder"}],"output":{"name":"cborresult"}}],[11,"from_memory","","Encode CBOR to an in memory buffer.",10,{"inputs":[{"name":"encoder"}],"output":{"name":"encoder"}}],[11,"as_bytes","","Flush and retrieve the CBOR bytes that have been written.",10,null],[11,"into_bytes","","Flush and retrieve the CBOR bytes that have been written without\ncopying.",10,{"inputs":[{"name":"encoder"}],"output":{"name":"vec"}}],[11,"emit_nil","","",10,{"inputs":[{"name":"encoder"}],"output":{"name":"cborresult"}}],[11,"emit_usize","","",10,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"cborresult"}}],[11,"emit_u64","","",10,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"cborresult"}}],[11,"emit_u32","","",10,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"cborresult"}}],[11,"emit_u16","","",10,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"cborresult"}}],[11,"emit_u8","","",10,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"cborresult"}}],[11,"emit_isize","","",10,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"cborresult"}}],[11,"emit_i64","","",10,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"cborresult"}}],[11,"emit_i32","","",10,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"cborresult"}}],[11,"emit_i16","","",10,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"cborresult"}}],[11,"emit_i8","","",10,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"cborresult"}}],[11,"emit_f64","","",10,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"cborresult"}}],[11,"emit_f32","","",10,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"cborresult"}}],[11,"emit_bool","","",10,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"cborresult"}}],[11,"emit_char","","",10,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"cborresult"}}],[11,"emit_str","","",10,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"cborresult"}}],[11,"emit_enum","","",10,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_enum_variant","","",10,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_enum_variant_arg","","",10,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_enum_struct_variant","","",10,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_enum_struct_variant_field","","",10,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_struct","","",10,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_struct_field","","",10,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_tuple","","",10,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_tuple_arg","","",10,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_tuple_struct","","",10,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_tuple_struct_arg","","",10,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_option","","",10,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_option_none","","",10,{"inputs":[{"name":"encoder"}],"output":{"name":"cborresult"}}],[11,"emit_option_some","","",10,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_seq","","",10,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_seq_elt","","",10,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_map","","",10,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_map_elt_key","","",10,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_map_elt_val","","",10,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"to_json","","",2,{"inputs":[{"name":"cbor"}],"output":{"name":"json"}}],[11,"to_cbor","rustc_serialize::json","",11,{"inputs":[{"name":"json"}],"output":{"name":"cbor"}}],[11,"from_bytes","cbor","Create a new CBOR decoder that reads from the buffer given.",12,{"inputs":[{"name":"directdecoder"},{"name":"t"}],"output":{"name":"cbordecoder"}}],[11,"from_reader","","Create a new CBOR decoder that reads from the reader given.",12,{"inputs":[{"name":"directdecoder"},{"name":"r"}],"output":{"name":"cbordecoder"}}],[11,"error","","",12,{"inputs":[{"name":"directdecoder"},{"name":"str"}],"output":{"name":"cborerror"}}],[11,"read_nil","","",12,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_usize","","",12,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_u64","","",12,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_u32","","",12,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_u16","","",12,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_u8","","",12,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_isize","","",12,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_i64","","",12,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_i32","","",12,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_i16","","",12,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_i8","","",12,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_bool","","",12,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_f64","","",12,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_f32","","",12,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_char","","",12,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_str","","",12,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_enum","","",12,{"inputs":[{"name":"directdecoder"},{"name":"str"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_enum_variant","","",12,null],[11,"read_enum_variant_arg","","",12,{"inputs":[{"name":"directdecoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_enum_struct_variant","","",12,null],[11,"read_enum_struct_variant_field","","",12,{"inputs":[{"name":"directdecoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_struct","","",12,{"inputs":[{"name":"directdecoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_struct_field","","",12,{"inputs":[{"name":"directdecoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_tuple","","",12,{"inputs":[{"name":"directdecoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_tuple_arg","","",12,{"inputs":[{"name":"directdecoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_tuple_struct","","",12,{"inputs":[{"name":"directdecoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_tuple_struct_arg","","",12,{"inputs":[{"name":"directdecoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_option","","",12,{"inputs":[{"name":"directdecoder"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_seq","","",12,{"inputs":[{"name":"directdecoder"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_seq_elt","","",12,{"inputs":[{"name":"directdecoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_map","","",12,{"inputs":[{"name":"directdecoder"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_map_elt_key","","",12,{"inputs":[{"name":"directdecoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_map_elt_val","","",12,{"inputs":[{"name":"directdecoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[6,"CborResult","","Type synonym for `Result<T, CborError>`.",null,null],[8,"ToCbor","","A trait for converting values to CBOR.",null,null],[10,"to_cbor","","Return a CBOR representation of `self`.",13,{"inputs":[{"name":"tocbor"}],"output":{"name":"cbor"}}],[11,"eq","","",1,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"type"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"type"}],"output":{"name":"type"}}],[11,"fmt","","",1,{"inputs":[{"name":"type"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"cbor"},{"name":"cbor"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"cbor"},{"name":"cbor"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"cbor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"cbor"}],"output":{"name":"cbor"}}],[11,"decode","","",3,{"inputs":[{"name":"cborunsigned"},{"name":"__d"}],"output":{"name":"result"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"cborunsigned"},{"name":"cborunsigned"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"cborunsigned"},{"name":"cborunsigned"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"cborunsigned"},{"name":"cborunsigned"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"cborunsigned"},{"name":"cborunsigned"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"cborunsigned"},{"name":"cborunsigned"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"cborunsigned"},{"name":"cborunsigned"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"cborunsigned"},{"name":"cborunsigned"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"cborunsigned"},{"name":"cborunsigned"}],"output":{"name":"ordering"}}],[11,"fmt","","",3,{"inputs":[{"name":"cborunsigned"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"cborunsigned"}],"output":{"name":"cborunsigned"}}],[11,"decode","","",4,{"inputs":[{"name":"cborsigned"},{"name":"__d"}],"output":{"name":"result"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"cborsigned"},{"name":"cborsigned"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"cborsigned"},{"name":"cborsigned"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"cborsigned"},{"name":"cborsigned"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"cborsigned"},{"name":"cborsigned"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"cborsigned"},{"name":"cborsigned"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"cborsigned"},{"name":"cborsigned"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"cborsigned"},{"name":"cborsigned"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"cborsigned"},{"name":"cborsigned"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"cborsigned"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"cborsigned"}],"output":{"name":"cborsigned"}}],[11,"decode","","",5,{"inputs":[{"name":"cborfloat"},{"name":"__d"}],"output":{"name":"result"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"cborfloat"},{"name":"cborfloat"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"cborfloat"},{"name":"cborfloat"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"cborfloat"},{"name":"cborfloat"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"cborfloat"},{"name":"cborfloat"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"cborfloat"},{"name":"cborfloat"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"cborfloat"},{"name":"cborfloat"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"cborfloat"},{"name":"cborfloat"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"cborfloat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"cborfloat"}],"output":{"name":"cborfloat"}}],[11,"encode","","",14,{"inputs":[{"name":"cborbytes"},{"name":"__s"}],"output":{"name":"result"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"cborbytes"},{"name":"cborbytes"}],"output":{"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"cborbytes"},{"name":"cborbytes"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"cborbytes"},{"name":"cborbytes"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"cborbytes"},{"name":"cborbytes"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"cborbytes"},{"name":"cborbytes"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"cborbytes"},{"name":"cborbytes"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"cborbytes"},{"name":"cborbytes"}],"output":{"name":"bool"}}],[11,"cmp","","",14,{"inputs":[{"name":"cborbytes"},{"name":"cborbytes"}],"output":{"name":"ordering"}}],[11,"fmt","","",14,{"inputs":[{"name":"cborbytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"cborbytes"}],"output":{"name":"cborbytes"}}],[11,"encode","","",0,{"inputs":[{"name":"cbortag"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"cbortag"},{"name":"cbortag"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"cbortag"},{"name":"cbortag"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"cbortag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"cbortag"}],"output":{"name":"cbortag"}}],[11,"encode","","",15,{"inputs":[{"name":"cbortagencode"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"cbortagencode"},{"name":"cbortagencode"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"cbortagencode"},{"name":"cbortagencode"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"cbortagencode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"cbortagencode"}],"output":{"name":"cbortagencode"}}],[11,"new","","Create a new value that is encodable as a CBOR tag.",15,{"inputs":[{"name":"cbortagencode"},{"name":"u64"},{"name":"t"}],"output":{"name":"cbortagencode"}}],[11,"encode","","",2,{"inputs":[{"name":"cbor"},{"name":"e"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"cborunsigned"},{"name":"e"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"cborsigned"},{"name":"e"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"cborfloat"},{"name":"e"}],"output":{"name":"result"}}],[6,"Target","","",null,null],[11,"deref","","",14,null],[11,"deref_mut","","",14,null],[11,"decode","","",14,{"inputs":[{"name":"cborbytes"},{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"cborerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"readerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"readerror"}],"output":{"name":"readerror"}}],[11,"fmt","","",8,{"inputs":[{"name":"writeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"writeerror"}],"output":{"name":"writeerror"}}],[11,"from","","",6,{"inputs":[{"name":"cborerror"},{"name":"error"}],"output":{"name":"cborerror"}}],[11,"from","","",6,{"inputs":[{"name":"cborerror"},{"name":"error"}],"output":{"name":"cborerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"cborerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"readerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"writeerror"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"CborTag"],[4,"Type"],[4,"Cbor"],[4,"CborUnsigned"],[4,"CborSigned"],[4,"CborFloat"],[4,"CborError"],[4,"ReadError"],[4,"WriteError"],[3,"Decoder"],[3,"Encoder"],[4,"Json"],[3,"DirectDecoder"],[8,"ToCbor"],[3,"CborBytes"],[3,"CborTagEncode"]]};
searchIndex['rustc_serialize'] = {"items":[[0,"","rustc_serialize","Support code for encoding and decoding types.",null,null],[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",3,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",4,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",5,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",6,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",7,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",8,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",10,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",11,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"linkedlist"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",12,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"vecdeque"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",13,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"btreemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",14,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"btreeset"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",15,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"hashmap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",16,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"hashset"},{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",17,null],[12,"newline","","Newline to use",17,null],[12,"pad","","True to pad output with `=` characters",17,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",17,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",18,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",18,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",19,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",19,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",20,null],[13,"InvalidBase64Length","","The input had an invalid length",20,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",21,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",22,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"clone","","",19,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"clone","","",17,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",20,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",20,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",20,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",20,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",23,null],[13,"InvalidHexLength","","The input had an invalid length",23,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",24,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",25,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",23,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",23,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",23,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",26,null],[13,"U64","","",26,null],[13,"F64","","",26,null],[13,"String","","",26,null],[13,"Boolean","","",26,null],[13,"Array","","",26,null],[13,"Object","","",26,null],[13,"Null","","",26,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",27,null],[13,"InvalidNumber","","",27,null],[13,"EOFWhileParsingObject","","",27,null],[13,"EOFWhileParsingArray","","",27,null],[13,"EOFWhileParsingValue","","",27,null],[13,"EOFWhileParsingString","","",27,null],[13,"KeyMustBeAString","","",27,null],[13,"ExpectedColon","","",27,null],[13,"TrailingCharacters","","",27,null],[13,"TrailingComma","","",27,null],[13,"InvalidEscape","","",27,null],[13,"InvalidUnicodeCodePoint","","",27,null],[13,"LoneLeadingSurrogateInHexEscape","","",27,null],[13,"UnexpectedEndOfHexEscape","","",27,null],[13,"UnrecognizedHex","","",27,null],[13,"NotFourDigit","","",27,null],[13,"ControlCharacterInString","","",27,null],[13,"NotUtf8","","",27,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",28,null],[13,"IoError","","",28,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",29,null],[13,"ExpectedError","","",29,null],[13,"MissingFieldError","","",29,null],[13,"UnknownVariantError","","",29,null],[13,"ApplicationError","","",29,null],[13,"EOF","","",29,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",30,null],[13,"BadHashmapKey","","",30,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",31,null],[13,"ObjectEnd","","",31,null],[13,"ArrayStart","","",31,null],[13,"ArrayEnd","","",31,null],[13,"BooleanValue","","",31,null],[13,"I64Value","","",31,null],[13,"U64Value","","",31,null],[13,"F64Value","","",31,null],[13,"StringValue","","",31,null],[13,"NullValue","","",31,null],[13,"Error","","",31,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",32,null],[13,"Key","","",32,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",33,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",26,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",27,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",28,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",27,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",29,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",29,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",29,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",28,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",28,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",30,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"encodererror"},{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",34,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",34,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",34,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[6,"Error","","",null,null],[11,"emit_nil","","",34,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",34,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",34,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",34,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",34,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",34,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",34,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",34,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",34,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",34,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",34,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",34,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",34,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",34,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",34,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",34,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",34,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",34,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",26,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",26,{"inputs":[{"name":"json"},{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",26,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",26,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[6,"Output","","",null,null],[11,"index","","",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[6,"Output","","",null,null],[11,"index","","",26,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",31,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",32,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",35,{"inputs":[{"name":"stack"}],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",35,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",35,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",35,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",35,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",35,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",35,null],[11,"top","","Returns the top-most element (if any).",35,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",36,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",36,{"inputs":[{"name":"parser"},{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",36,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",37,{"inputs":[{"name":"builder"},{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",37,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",38,{"inputs":[{"name":"decoder"},{"name":"json"}],"output":{"name":"decoder"}}],[6,"Error","","",null,null],[11,"read_nil","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",38,null],[11,"read_enum_variant_arg","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",38,null],[11,"read_enum_struct_variant_field","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",38,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",38,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",38,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",38,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",26,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",3,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",13,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",15,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",4,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",26,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",39,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",41,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Err","","",null,null],[11,"from_str","","",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","rustc_serialize::Decoder","",null,null],[10,"read_nil","rustc_serialize","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",42,null],[10,"read_enum_variant_arg","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",42,null],[10,"read_enum_struct_variant_field","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",42,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",42,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",42,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",42,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","rustc_serialize::Encoder","",null,null],[10,"emit_nil","rustc_serialize","",43,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",43,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",43,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",43,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",43,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",43,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",43,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",43,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",43,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",43,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",43,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",43,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",43,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",43,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",43,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",43,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",43,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",43,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",44,{"inputs":[{"name":"decodable"},{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",45,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",46,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",47,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex['byteorder'] = {"items":[[0,"","byteorder","This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.",null,null],[4,"Error","","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","std::io::error","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","byteorder","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[6,"Result","","A short-hand for `result::Result<T, byteorder::Error>`.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",4,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",4,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",4,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",4,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",4,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",4,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",4,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",4,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",4,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",4,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",4,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",4,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",4,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",4,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"read_u16","","",6,null],[11,"read_u32","","",6,null],[11,"read_u64","","",6,null],[11,"read_uint","","",6,null],[11,"write_u16","","",6,null],[11,"write_u32","","",6,null],[11,"write_u64","","",6,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,null]],"paths":[[4,"Error"],[3,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
initSearch(searchIndex);
